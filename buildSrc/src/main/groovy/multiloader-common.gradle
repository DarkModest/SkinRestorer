plugins {
    id 'java-library'
}

base {
    archivesName = "${mod_id}-${project.name}"
    version = "${mod_version}+${minecraft_version}"
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(java_version)
    withSourcesJar()
}

repositories {
    mavenCentral()
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
    maven {
        name = 'Fabric'
        url = 'https://maven.fabricmc.net'
    }
    maven {
        name = 'Forge'
        url = 'https://maven.minecraftforge.net'
    }
    maven {
        name = 'NeoForge'
        url = 'https://maven.neoforged.net/releases'
    }
    exclusiveContent {
        forRepository {
            maven {
                name = 'Sponge'
                url = 'https://repo.spongepowered.org/repository/maven-public'
            }
        }
        filter {
            includeGroupAndSubgroups('org.spongepowered')
        }
    }
}

// Declare capabilities on the outgoing configurations.
// Read more about capabilities here: https://docs.gradle.org/current/userguide/component_capabilities.html#sec:declaring-additional-capabilities-for-a-local-component
['apiElements', 'runtimeElements', 'sourcesElements'].each { variant ->
    configurations."$variant".outgoing {
        capability("$group:${base.archivesName.get()}:$version")
        capability("$group:$mod_id-${project.name}:$version")
        capability("$group:$mod_id:$version")
    }
}

sourcesJar {
    from(rootProject.file('LICENSE')) {
        rename { "${it}_${mod_name}" }
    }
}

jar {
    from(rootProject.file('LICENSE')) {
        rename { "${it}_${mod_name}" }
    }

    manifest {
        attributes([
                'Specification-Title'   : mod_name,
                'Specification-Vendor'  : mod_author,
                'Specification-Version' : project.jar.archiveVersion,
                'Implementation-Title'  : project.name,
                'Implementation-Version': project.jar.archiveVersion,
                'Implementation-Vendor' : mod_author,
                'Built-On-Minecraft'    : minecraft_version
        ])
    }
}

processResources {
    def expandProps = [
            'version'                      : version,
            'group'                        : project.group, //Else we target the task's group.
            'minecraft_version'            : minecraft_version,
            'minecraft_version_range'      : minecraft_version_range,
            'fabric_loader_version'        : fabric_loader_version,
            'mod_name'                     : mod_name,
            'mod_author'                   : mod_author,
            'mod_id'                       : mod_id,
            'mod_homepage'                 : mod_homepage,
            'mod_sources'                  : mod_sources,
            'mod_issues'                   : mod_issues,
            'license'                      : license,
            'description'                  : project.description,
            'forge_version'                : forge_version,
            'forge_loader_version_range'   : forge_loader_version_range,
            'neoforge_version'             : neoforge_version,
            'neoforge_loader_version_range': neoforge_loader_version_range,
            'credits'                      : credits,
            'java_version'                 : java_version
    ]

    filesMatching(['pack.mcmeta', 'fabric.mod.json', 'META-INF/mods.toml', 'META-INF/neoforge.mods.toml', '*.mixins.json']) {
        expand expandProps
    }
    inputs.properties(expandProps)
}
